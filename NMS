import numpy as np  


def IoU(vertice1, vertice2):
     """
     这是计算两个矩形区域的交并比函数，verticle格式为:[xin,ymin,xmax,ymax]
     :param vertice1: 目标框1
     :param vertice2: 目标框1
     :return: 两个矩形区域的交并比
     """
     # 计算区域交集的左上与右下坐标
     lu = np.maximum(vertice1[0:2], vertice2[0:2])
     rd = np.minimum(vertice1[2:], vertice2[2:])
     # 计算区域交集的面积
     intersection = np.maximum(0.0, rd - lu)
     inter_square = intersection[0] * intersection[1]
     # 计算区域并集的面积
     square1 = (vertice1[2] - vertice1[0]) * (vertice1[3] - vertice1[1])
     square2 = (vertice2[2] - vertice2[0]) * (vertice2[3] - vertice2[1])
     union_square = np.maximum(square1 + square2 - inter_square, 1e-10)
     return np.clip(inter_square / union_square, 0.0, 1.0)


def py_cpu_nms(dets, thresh):
    """
    这是NMS去除重复目标框的函数
    :param dets: 目标框数组，目标框的格式为：[xin,ymin,xmax,ymax,score]
    :param thresh: 阈值
    :return: 不重复的目标框数组在元目标框数组中的下标数组
    """
 
    vertices = dets[:, 0:4]  # 目标框
    scores = dets[:, 4]  # bbox打分
 
    #areas = (x2 - x1 + 1) * (y2 - y1 + 1)
    # 打分从大到小排列，取index
    order = scores.argsort()[::-1]
    # keep为最后保留的边框
    keep = []
    while order.size > 0:
        # order[0]是当前分数最大的窗口，肯定保留
        i = order[0]
        keep.append(i)
        # 计算窗口i与其他所有窗口的交叠部分的面积
        ious = np.array([IoU(vertices[i], vertices[j]) for j in order[1:]])
        # inds为所有与窗口i的iou值小于threshold值的窗口的index，其他窗口此次都被窗口i吸收
        inds = np.where(ious <= thresh)[0]
        # order里面只保留与窗口i交叠面积小于threshold的那些窗口，由于ovr长度比order长度少1(不包       含i)，所以inds+1对应到保留的窗口
        order = order[inds + 1]
    return keep
